@startuml
!theme carbon-gray
'class Parameters_win'

/'
Pour l'instant la fenêtre principale a une liste de graph 
propre à chaque layout affiché
sur lesquels les données sont affichées et changées en fonction du type
En supposant donc que tout s'affiche sur un Multiplotwidget

Changement de paradigme
La fenetre principale a une liste des types d'affichages souhaitées
chaques affichage à une fenêtre qui lui est propre

avant 
dict_display {id: graph } 
MainWindow --> graph
class graph{
    multiplot
    plot
}

desormais
dict_display {id: <s> graph </s> type } 

'/

class MainWindow{
    - dict_data : {'name file' : MyDataLoader}
    - dict_layout {from Layout_Graph + dock}
    - dict_display {id:MyPlot}
    - load_multiple_file() {calls the correct dataloader for each type of file}
}

object dict_correspondance_format_dataloader

class MyDataLoader{
    - data : DataFram, xarray, hdf5, c3d
    - dict_group : { 'group_path':{'var':[channel],'var2': [chanel]}}
    - path : str
    - name :
    - attrs = {}

    - format() : static method

    - open_file() {return data}
    - load_attribut(group) {update attrs}

    - getData (group,var,dim,channel) xarray
    - getDataVariable (group, var, dim) xarray
    - get_DataFromDict (dict) list of xarray per variable

    - setData(group,var,dim,channel,data)
    - setAttributs(attrs)
}
note right
DataLoader are specific to the type of file
MyDataLoadernc, MyDataLoadercsv, MyDataLoaderc3d...
end note

class Layout_Parameters_Type{
    - layout_param() {layout to insert setting of the plot }
    - load_ui()
    - oc_selectData()
    - get_data()
    - isDataIndependent()

}
note left
Le Layout peut être personnalisé
et renvoie juste les emplacements 
où les graphes peuvent être affichés.

Cela permet aussi de rendre plus flexible 
les moyens de retourner les frames.
end note





MainWindow::dict_layout --> Layout_Graph
MainWindow::data  -> dict_correspondance_format_dataloader
dict_correspondance_format_dataloader --> MyDataLoader
MainWindow::dict_display  --->"*" OneGraph


class OneGraph{
    -id
    -parent
    -ui_graph
    -ui_parameters
    -layout_graph { button }
    -layout_parameters
    - update_drawing()
    - selectedData
    - oc_clickButton()
    - oc_comboBox_type_changed()
    - get_selectedData()
    - retrieve_Data() { choose between the data retrieve by the plot or the chosen data}
    -add_paramUi_to_layout()
    -add_graphUi_to_layout()
    -add_setting_to_param()
    -setPlot()
    - clearPlot()
}

class Layout_Paramerters_Type{
    {inherits from QWidget}
    -layout_setting
    -loadUI()
}


class LayoutSettingfft{
    {inherits from Qwidget}
    -loadUI()
    -setInteractivity()
}

class LayoutSettingline{
    {inherits from Qwidget}
    -loadUI()
    -setInteractivity()
}

class PlotGeneral{
    {abstract}
    -id 
    -layout
    -layout_graph
    -parent

    -draw()
    -clear()

}

class PlotLine{

    -l {Layout ui}
    -function_name

}

class PlotFFT{

    -l {Layout ui}
    -function_name

}

OneGraph::ui_graph *-- PlotGeneral
OneGraph::ui_parameters *-- Layout_Paramerters_Type


pgMultiPlotWidget <|--PlotLine
pgMultiPlotWidget <|--PlotFFT
PlotGeneral <|--PlotFFT
PlotGeneral <|--PlotLine

PlotLine::l *-- LayoutSettingline
PlotFFT::l *-- LayoutSettingfft

rectangle FilterCreationBox<<Rectangle>>{

Class Filters{

    - listFilters {dict}
    - nb
    - tree  {pg ParameterTree}
    - Parameters { pg Parameter}
    - add_parameter

    - CreateTree()
    - addNew() {add a setting to the tree Parameter}
    - addFilter() {add the function to the dictionnary}
    
}

class OneSetting{

    - layout
    - dict_setting
    - create_layout_from_function() {definition of the layout + interactivity}
    - create_dict_setting_from_function()

}

FilterCreation o- OneFilter
}


rectangle ProcessingFunction<<Rectangle>>{
    class otherFunction{
        - DATALOADER { '.nc' : MyDataLoaderNC }
        - WalkDatatree_getPathDataset (datatree) dictionnaries of paths, leaf are list of channel
        - WalkDatatree_getAttrDataset(datatree)

        - load_multiple_files(paths)
        - getDataDatatree(datatree, group,var,dim,channel)
        - get_dim(list_dim)
        - xarray_to_dataframe(xarray) dataframe with columns 'Group','Var','Dim','Value'

    }

}
@enduml
